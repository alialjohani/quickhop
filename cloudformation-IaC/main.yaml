Parameters:
  awsRegion:
    Type: String
    Description: Region to create the resources on.
  awsS3BucketName:
    Type: String
    Description: The bucket must already exist to upload/download files from.
  awsS3RecordingPrefix:
    Type: String
    Description: AWS Connect auto saves recording to a bucket with a prefix, this is the prefix (the path where recording being saved).
  awsKeyPair:
    Type: String
    Description: "The name of the predefined (existing) key pair to access EC2 servers."
  VPC:
    Type: "AWS::EC2::VPC::Id"
    Description: The default VPC ID.
  Subnet1:
    Type: "AWS::EC2::Subnet::Id"
    Description: "Public subnet. The other subnet must be in a different Availability Zone."
  Subnet2:
    Type: "AWS::EC2::Subnet::Id"
    Description: "Public subnet. The other subnet must be in a different Availability Zone."
  ec2InstanceImageId:
    Type: String
    Description: "The image ID of the EC2 instance (Note: each region has different image ID)."
  mainProjectFolderName:
    Type: String
    Description: "The name of the main folder that has the project ('quickhop')"
    Default: "quickhop"
  backendProjectFolderName:
    Type: String
    Description: "The name of the main folder for the backend code ('web-app-backend')"
    Default: "web-app-backend"
  frontendProjectFolderName:
    Type: String
    Description: "The name of the main folder for the frontend code ('web-app-frontend')"
    Default: "web-app-frontend"
  lambdaProjectFolderName:
    Type: String
    Description: "The name of the main folder for the lambda code ('lambda-functions')"
    Default: "lambda-functions"
  repoGit:
    Type: String
    Description: "The https URL for the Quickhop Git repo."
    Default: "https://github.com/alialjohani/quickhop.git"
  SSLCertificateArn:
    Type: String
    Description: SSL certification that should be configured in AWS ACM, and its ARN value should be passed.
  backendBaseUrl:
    Type: String
    Description: API URL endpoint.
  allowedOrigin:
    Type: String
    Description: Provide frontend https url to be added as allowed origin in backend server.
  cognitoUserPoolDomain:
    Type: String
    Description: A unique name that would be used by Cognito for the user pool domain configuration.
  cognitoRedirectUri:
    Type: String
    Description: Cognito redirect uri, that must end with /callback. This uri must be already configured in Cognito.
  googleClientId:
    Type: String
    Description: Google Client Id for SSO (to be used with Job Seeker Loign to the app).
  openaiApiKey:
    Type: String
    Description: OpenAI key to access the model.
  openaiModel:
    Type: String
    Description: OpenAI model type.
  adminEmailId:
    Type: String
    Description: Any email to be used as an admin email to access backend.
    Default: admin@admin.com
  dbIdentifier:
    Type: String
    Description: The db name on the aws console.
  dbName:
    Type: String
    Description: The actual db name.
  dbUser:
    Type: String
    Description: The username for the RDS database.
  dbPort:
    Type: Number
    Description: The DB port number is fixed here as the default value, without reading from Parameters.json.
    Default: 5432
  dynamoDBTableInterviewees:
    Type: String
    Description: The table name to save interviewees information.
    Default: "quickhop_Interviewees"
  dynamoDBTableInitialMessage:
    Type: String
    Description: The table name that stores the initial prompt message for the AI.
    Default: "quickhop_Initial_Message"
  dynamoDBTableCounter:
    Type: String
    Description: The table name that is used as a counter for each job post.
    Default: "quickhop_CallerDidCallCounter"
  recruitmentPhone:
    Type: String
    Description: Phone number assigned to the AWS Connect main IVR to receive the interview calls.

Resources:
  CognitoResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/CognitoResources.yaml"
      Parameters:
        awsRegion: !Ref awsRegion
        cognitoUserPoolDomain: !Ref cognitoUserPoolDomain
        cognitoRedirectUri: !Ref cognitoRedirectUri

  SSMParameters:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - CognitoResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/SSMParameters.yaml"
      Parameters:
        awsRegion: !Ref awsRegion
        awsS3BucketName: !Ref awsS3BucketName
        cognitoRedirectUri: !Ref cognitoRedirectUri
        googleClientId: !Ref googleClientId
        openaiApiKey: !Ref openaiApiKey
        openaiModel: !Ref openaiModel
        backendBaseUrl: !Ref backendBaseUrl
        allowedOrigin: !Ref allowedOrigin
        dbIdentifier: !Ref dbIdentifier
        dbName: !Ref dbName
        dbUser: !Ref dbUser
        adminEmailId: !Ref adminEmailId
        recruitmentPhone: !Ref recruitmentPhone
        dynamoDBTableInterviewees: !Ref dynamoDBTableInterviewees
        dynamoDBTableInitialMessage: !Ref dynamoDBTableInitialMessage
        dynamoDBTableCounter: !Ref dynamoDBTableCounter

  RoleResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/RoleResources.yaml"

  DynamodbResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/DynamodbResources.yaml"
      Parameters:
        dynamoDBTableInterviewees: !Ref dynamoDBTableInterviewees
        dynamoDBTableInitialMessage: !Ref dynamoDBTableInitialMessage
        dynamoDBTableCounter: !Ref dynamoDBTableCounter

  SGResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/SGResources.yaml"
      Parameters:
        VPC: !Ref VPC
        dbPort: !Ref dbPort

  DBResources:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SGResources
      - SSMParameters
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/DBResources.yaml"
      Parameters:
        Subnet1: !Ref Subnet1
        Subnet2: !Ref Subnet2
        dbIdentifier: !Ref dbIdentifier
        dbName: !Ref dbName
        dbUser: !Ref dbUser
        dbPort: !Ref dbPort

  LambdaResources:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - RoleResources
      - DBResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/LambdaResources.yaml"
      Parameters:
        awsRegion: !Ref awsRegion
        dbName: !Ref dbName
        dbUser: !Ref dbUser
        dbPort: !Ref dbPort
        awsS3BucketName: !Ref awsS3BucketName
        awsS3RecordingPrefix: !Ref awsS3RecordingPrefix
        openaiApiKey: !Ref openaiApiKey
        dynamoDBTableInterviewees: !Ref dynamoDBTableInterviewees
        dynamoDBTableInitialMessage: !Ref dynamoDBTableInitialMessage
        dynamoDBTableCounter: !Ref dynamoDBTableCounter

  LexResources:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - RoleResources
      - LambdaResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/LexResources.yaml"

  StepFunctionResources:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - RoleResources
      - LambdaResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/StepFunctionResources.yaml"

  EventBridgeRuleResources:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - RoleResources
      - StepFunctionResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/EventBridgeRuleResources.yaml"

  BackendAppEC2Instance:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SSMParameters
      - RoleResources
      - DBResources
      - LambdaResources # the lambda code is deployed from this EC2
      - LexResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/BackendAppEC2Instance.yaml"
      Parameters:
        awsRegion: !Ref awsRegion
        awsS3BucketName: !Ref awsS3BucketName
        ec2InstanceImageId: !Ref ec2InstanceImageId
        Subnet1: !Ref Subnet1
        mainProjectFolderName: !Ref mainProjectFolderName
        backendProjectFolderName: !Ref backendProjectFolderName
        lambdaProjectFolderName: !Ref lambdaProjectFolderName
        repoGit: !Ref repoGit
        awsKeyPair: !Ref awsKeyPair

  FrontendAppEC2Instance:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SSMParameters
      - RoleResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/FrontendAppEC2Instance.yaml"
      Parameters:
        awsRegion: !Ref awsRegion
        ec2InstanceImageId: !Ref ec2InstanceImageId
        Subnet1: !Ref Subnet1
        mainProjectFolderName: !Ref mainProjectFolderName
        frontendProjectFolderName: !Ref frontendProjectFolderName
        repoGit: !Ref repoGit
        awsKeyPair: !Ref awsKeyPair

  TargetGroupResources:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - BackendAppEC2Instance
      - FrontendAppEC2Instance
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/TargetGroupResources.yaml"
      Parameters:
        VPC: !Ref VPC

  LoadBalancerResources:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - SGResources
      - TargetGroupResources
    Properties:
      TemplateURL: !Sub "https://${awsS3BucketName}.s3.${awsRegion}.amazonaws.com/LoadBalancerResources.yaml"
      Parameters:
        SSLCertificateArn: !Ref SSLCertificateArn
        Subnet1: !Ref Subnet1
        Subnet2: !Ref Subnet2
